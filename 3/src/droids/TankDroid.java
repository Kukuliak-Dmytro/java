package droids;

/**
 * –ö–ª–∞—Å —Ç–∞–Ω–∫–∞-–¥—Ä–æ—ó–¥–∞ –∑ –≤–∏—Å–æ–∫–∏–º HP —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º–∏ –∑–¥—ñ–±–Ω–æ—Å—Ç—è–º–∏:
 * - –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞—Ç–∞–∫ (25% —à–∞–Ω—Å –∑–º–µ–Ω—à–∏—Ç–∏ —É—Ä–æ–Ω –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É)
 * - –ü—Ä–æ–≤–æ–∫–∞—Ü—ñ—è (–º–æ–∂–µ –∑–º—É—Å–∏—Ç–∏ –≤–æ—Ä–æ–≥–∞ –∞—Ç–∞–∫—É–≤–∞—Ç–∏ —Å–µ–±–µ - –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–∏—Ö –±–æ—ó–≤)
 */
public class TankDroid extends Droid {
    private static final double BLOCK_CHANCE = 0.25; // 25% —à–∞–Ω—Å –±–ª–æ–∫—É–≤–∞—Ç–∏ –∞—Ç–∞–∫—É
    private static final double BLOCK_REDUCTION = 0.5; // –ó–º–µ–Ω—à—É—î —É—Ä–æ–Ω –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É
    
    public TankDroid(String name) {
        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–≥—ñ–¥–Ω–æ –∑ –ø–ª–∞–Ω–æ–º: –≤–∏—Å–æ–∫–µ HP, –Ω–∏–∑—å–∫–∏–π —É—Ä–æ–Ω, —Å–µ—Ä–µ–¥–Ω—è —Ç–æ—á–Ω—ñ—Å—Ç—å, –Ω–∏–∑—å–∫–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å
        super(name, 225, 20, 0.75, 9);
    }
    
    @Override
    protected int applySpecialAttackAbility(int damage, Droid target) {
        // –£ —Ç–∞–Ω–∫–∞ –Ω–µ–º–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∞—Ç–∞–∫—É—é—á–∏—Ö –∑–¥—ñ–±–Ω–æ—Å—Ç–µ–π
        return damage;
    }
    
    @Override
    protected int applySpecialDefenseAbility(int incomingDamage) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        if (random.nextDouble() < BLOCK_CHANCE) {
            int blockedDamage = (int) (incomingDamage * BLOCK_REDUCTION);
            System.out.println(name + " –ë–õ–û–ö–£–Ñ –∞—Ç–∞–∫—É! –£—Ä–æ–Ω –∑–º–µ–Ω—à–µ–Ω–æ –∑ " + incomingDamage + " –¥–æ " + blockedDamage);
            return blockedDamage;
        }
        
        return incomingDamage;
    }
    
    /**
     * –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –∑–¥—ñ–±–Ω—ñ—Å—Ç—å –ø—Ä–æ–≤–æ–∫–∞—Ü—ñ—ó (–¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–∏—Ö –±–æ—ó–≤)
     * –ü—Ä–∏–º—É—à—É—î –≤–æ—Ä–æ–≥–∞ –∞—Ç–∞–∫—É–≤–∞—Ç–∏ —Ü—å–æ–≥–æ —Ç–∞–Ω–∫–∞
     */
    public void provoke(Droid enemy) {
        System.out.println(name + " –ø—Ä–æ–≤–æ–∫—É—î " + enemy.getName() + "! –ù–∞—Å—Ç—É–ø–Ω–∞ –∞—Ç–∞–∫–∞ –±—É–¥–µ —Å–ø—Ä—è–º–æ–≤–∞–Ω–∞ –Ω–∞ —Ç–∞–Ω–∫–∞!");
        // –õ–æ–≥—ñ–∫–∞ –ø—Ä–æ–≤–æ–∫–∞—Ü—ñ—ó –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—ñ –±–æ—é
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–µ —Ç–∞–Ω–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø—Ä–æ–≤–æ–∫–∞—Ü—ñ—é
     */
    public boolean canProvoke() {
        // –ü—Ä–æ–≤–æ–∫–∞—Ü—ñ—é –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏, —è–∫—â–æ —Ç–∞–Ω–∫ –∂–∏–≤–∏–π —ñ –º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ HP
        return isAlive() && health > maxHealth * 0.2; // –ü–æ—Ç—Ä–µ–±—É—î –º—ñ–Ω—ñ–º—É–º 20% HP
    }
    
    @Override
    public String getInfo() {
        String baseInfo = super.getInfo();
        StringBuilder additionalInfo = new StringBuilder(baseInfo);
        
        additionalInfo.append("\n  –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ:");
        additionalInfo.append(String.format("\n  - –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è: %.0f%% —à–∞–Ω—Å –∑–º–µ–Ω—à–∏—Ç–∏ —É—Ä–æ–Ω –Ω–∞ %.0f%%", 
                            BLOCK_CHANCE * 100, (1 - BLOCK_REDUCTION) * 100));
        additionalInfo.append("\n  - –ü—Ä–æ–≤–æ–∫–∞—Ü—ñ—è: –ø—Ä–∏–º—É—à—É—î –≤–æ—Ä–æ–≥—ñ–≤ –∞—Ç–∞–∫—É–≤–∞—Ç–∏ —Å–µ–±–µ");
        
        if (canProvoke()) {
            additionalInfo.append("\n  üõ°Ô∏è –ì–æ—Ç–æ–≤–∏–π –¥–æ –ø—Ä–æ–≤–æ–∫–∞—Ü—ñ—ó!");
        }
        
        return additionalInfo.toString();
    }
}