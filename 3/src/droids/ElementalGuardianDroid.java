package droids;

import effects.ShieldEffect;
import effects.DamageBuffEffect;
import effects.FireEffect;

/**
 * –ö–ª–∞—Å –µ–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ö–∏—Å–Ω–∏–∫–∞ –∑ –ø–æ—Ç—É–∂–Ω–∏–º–∏ –∑–∞—Ö–∏—Å–Ω–∏–º–∏ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–º–∏ –∑–¥—ñ–±–Ω–æ—Å—Ç—è–º–∏:
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π —â–∏—Ç, —â–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∞—Ç–∞–∫
 * - –ú–æ–∂–µ –Ω–∞–¥–∞–≤–∞—Ç–∏ –±–∞—Ñ–∏ —Å–æ—é–∑–Ω–∏–∫–∞–º
 * - –ï–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –ø—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ
 */
public class ElementalGuardianDroid extends Droid {
    private static final double BLOCK_CHANCE = 0.35; // 35% —à–∞–Ω—Å –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏
    private static final double COUNTER_CHANCE = 0.20; // 20% —à–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏ –ø—Ä–∏ –±–ª–æ—Ü—ñ
    private static final double ADAPTIVE_SHIELD_THRESHOLD = 0.6; // –ü—Ä–∏ 60% HP
    private static final int SHIELD_REDUCTION = 25; // 25% –∑–º–µ–Ω—à–µ–Ω–Ω—è —É—Ä–æ–Ω—É
    private static final int SHIELD_DURATION = 3; // –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —â–∏—Ç–∞ –≤ —Ö–æ–¥–∞
    
    private boolean adaptiveShieldActive = false;
    private int blockedAttacksCount = 0;
    
    public ElementalGuardianDroid(String name) {
        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –Ω–∏–∑—å–∫–∏–π —É—Ä–æ–Ω, –¥—É–∂–µ –≤–∏—Å–æ–∫–µ HP, —Å–µ—Ä–µ–¥–Ω—è —Ç–æ—á–Ω—ñ—Å—Ç—å, –Ω–∏–∑—å–∫–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å
        super(name, 150, 22, 0.82, 10);
    }
    
    @Override
    protected int applySpecialAttackAbility(int damage, Droid target) {
        // –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —â–∏—Ç–∞ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
        if (!adaptiveShieldActive && health < maxHealth * ADAPTIVE_SHIELD_THRESHOLD) {
            activateAdaptiveShield();
        }
        
        // –ï–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–µ –ø—ñ–¥—Å–∏–ª–µ–Ω–Ω—è –∞—Ç–∞–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–∏—Ö –±–ª–æ–∫—ñ–≤
        if (blockedAttacksCount > 0) {
            double multiplier = 1.0 + (blockedAttacksCount * 0.1); // +10% –∑–∞ –∫–æ–∂–µ–Ω –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π —É–¥–∞—Ä
            damage = (int) (damage * multiplier);
            System.out.println(name + " –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–∞–∫–æ–ø–∏—á–µ–Ω—É –µ–Ω–µ—Ä–≥—ñ—é! (+" + 
                             (int)((multiplier - 1) * 100) + "% —É—Ä–æ–Ω—É)");
            blockedAttacksCount = Math.max(0, blockedAttacksCount - 2); // –í–∏—Ç—Ä–∞—á–∞—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é
        }
        
        return damage;
    }
    
    @Override
    protected int applySpecialDefenseAbility(int incomingDamage) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        if (random.nextDouble() < BLOCK_CHANCE) {
            blockedAttacksCount++;
            System.out.println(name + " –ë–õ–û–ö–£–Ñ –∞—Ç–∞–∫—É –µ–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–º —â–∏—Ç–æ–º!");
            
            // –®–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏ –ø—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ
            if (random.nextDouble() < COUNTER_CHANCE) {
                System.out.println(name + " –∑–¥—ñ–π—Å–Ω—é—î –ï–õ–ï–ú–ï–ù–¢–ê–õ–¨–ù–£ –ö–û–ù–¢–†–ê–¢–ê–ö–£!");
                // –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—ñ –±–æ—é
                // –¢—É—Ç —Ç—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –Ω–µ—ó
            }
            
            // –ë–ª–æ–∫ –∑–º–µ–Ω—à—É—î —É—Ä–æ–Ω –Ω–∞ 70%
            return (int) (incomingDamage * 0.3);
        }
        
        return incomingDamage;
    }
    
    /**
     * –ê–∫—Ç–∏–≤—É—î –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π —â–∏—Ç –ø—Ä–∏ –Ω–∏–∑—å–∫–æ–º—É HP
     */
    private void activateAdaptiveShield() {
        ShieldEffect shield = new ShieldEffect(SHIELD_DURATION, SHIELD_REDUCTION);
        this.applyEffect(shield);
        adaptiveShieldActive = true;
        System.out.println(name + " –∞–∫—Ç–∏–≤—É—î –ê–î–ê–ü–¢–ò–í–ù–ò–ô –ï–õ–ï–ú–ï–ù–¢–ê–õ–¨–ù–ò–ô –©–ò–¢! (-" + SHIELD_REDUCTION + "% —É—Ä–æ–Ω—É)");
    }
    
    /**
     * –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –∑–¥—ñ–±–Ω—ñ—Å—Ç—å - –µ–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å–æ—é–∑–Ω–∏–∫–∞
     * –ù–∞–¥–∞—î —Å–æ—é–∑–Ω–∏–∫—É —â–∏—Ç —Ç–∞ –ø—ñ–¥—Å–∏–ª–µ–Ω–Ω—è —É—Ä–æ–Ω—É
     */
    public void elementalSupport(Droid ally) {
        if (!canUseElementalSupport()) {
            System.out.println(name + " –Ω–µ –º–æ–∂–µ –Ω–∞–¥–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É!");
            return;
        }
        
        System.out.println(name + " –Ω–∞–¥–∞—î –ï–õ–ï–ú–ï–ù–¢–ê–õ–¨–ù–£ –ü–Ü–î–¢–†–ò–ú–ö–£ " + ally.getName() + "!");
        
        // –ù–∞–¥–∞—î–º–æ —â–∏—Ç
        ShieldEffect allyShield = new ShieldEffect(4, 20); // 20% –∑–º–µ–Ω—à–µ–Ω–Ω—è —É—Ä–æ–Ω—É
        ally.applyEffect(allyShield);
        
        // –ù–∞–¥–∞—î–º–æ –ø—ñ–¥—Å–∏–ª–µ–Ω–Ω—è —É—Ä–æ–Ω—É
        DamageBuffEffect allyBuff = new DamageBuffEffect(3, 0.3); // +30% —É—Ä–æ–Ω—É
        ally.applyEffect(allyBuff);
        
        System.out.println(ally.getName() + " –æ—Ç—Ä–∏–º—É—î –µ–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π —â–∏—Ç —Ç–∞ –ø—ñ–¥—Å–∏–ª–µ–Ω–Ω—è!");
        
        // –í–∏—Ç—Ä–∞—á–∞—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é –∑–∞—Ö–∏—Å–Ω–∏–∫–∞
        health = Math.max(1, health - 15); // –ñ–µ—Ä—Ç–≤—É—î–º–æ 15 HP –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
    }
    
    /**
     * –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –∞—Ç–∞–∫–∞ - –µ–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –≤–∏–±—É—Ö
     * –ó–∞–≤–¥–∞—î —É—Ä–æ–Ω —Ç–∞ –º–æ–∂–µ –ø—ñ–¥–ø–∞–ª–∏—Ç–∏ —Ü—ñ–ª—å
     */
    public void elementalBurst(Droid target) {
        if (!canUseElementalBurst()) {
            System.out.println(name + " –Ω–µ –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –≤–∏–±—É—Ö!");
            return;
        }
        
        System.out.println(name + " –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ï–õ–ï–ú–ï–ù–¢–ê–õ–¨–ù–ò–ô –í–ò–ë–£–•!");
        
        // –ü–æ—Ç—É–∂–Ω–∞ –∞—Ç–∞–∫–∞ –∑ –ø—ñ–¥–≤–∏—â–µ–Ω–∏–º —É—Ä–æ–Ω–æ–º
        double accuracyRoll = random.nextDouble();
        double effectiveAccuracy = Math.max(accuracy, accuracyRoll);
        int burstDamage = (int) (getModifiedDamage() * 2.0 * effectiveAccuracy); // –ü–æ–¥–≤—ñ–π–Ω–∏–π —É—Ä–æ–Ω
        
        // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –µ—Ñ–µ–∫—Ç
        if (random.nextDouble() < 0.6) { // 60% —à–∞–Ω—Å
            FireEffect elementalFire = new FireEffect(3, 18, 0.2);
            target.applyEffect(elementalFire);
            System.out.println("–í–∏–±—É—Ö —Å—Ç–≤–æ—Ä—é—î –µ–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –≤–æ–≥–æ–Ω—å!");
        }
        
        int actualDamage = target.takeDamage(burstDamage);
        System.out.println(name + " –∑–∞–≤–¥–∞—î " + actualDamage + " –µ–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–Ω—É!");
        
        // –°–∫–∏–¥–∞—î–º–æ –Ω–∞–∫–æ–ø–∏—á–µ–Ω—ñ –±–ª–æ–∫–∏ –ø—ñ—Å–ª—è –ø–æ—Ç—É–∂–Ω–æ—ó –∞—Ç–∞–∫–∏
        blockedAttacksCount = 0;
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É
     */
    public boolean canUseElementalSupport() {
        return isAlive() && health > 20;
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≤–∏–±—É—Ö
     */
    public boolean canUseElementalBurst() {
        return isAlive() && health > 25 && blockedAttacksCount >= 2;
    }
    
    /**
     * –°–∫–∏–¥–∞—î —Å—Ç–∞–Ω –¥–ª—è –Ω–æ–≤–∏—Ö –±–æ—ó–≤
     */
    public void resetGuardianState() {
        adaptiveShieldActive = false;
        blockedAttacksCount = 0;
    }
    
    @Override
    public String getInfo() {
        String baseInfo = super.getInfo();
        StringBuilder additionalInfo = new StringBuilder(baseInfo);
        
        additionalInfo.append("\n  –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ:");
        additionalInfo.append(String.format("\n  - –ï–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –±–ª–æ–∫: %.0f%% —à–∞–Ω—Å –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ (-70%% —É—Ä–æ–Ω—É)", 
                            BLOCK_CHANCE * 100));
        additionalInfo.append(String.format("\n  - –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞: %.0f%% —à–∞–Ω—Å –ø—Ä–∏ –±–ª–æ—Ü—ñ", COUNTER_CHANCE * 100));
        additionalInfo.append(String.format("\n  - –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π —â–∏—Ç: -%d%% —É—Ä–æ–Ω—É –ø—Ä–∏ HP < %.0f%%", 
                            SHIELD_REDUCTION, ADAPTIVE_SHIELD_THRESHOLD * 100));
        additionalInfo.append("\n  - –ï–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: —â–∏—Ç + –±–∞—Ñ —Å–æ—é–∑–Ω–∏–∫—É");
        additionalInfo.append("\n  - –ï–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –≤–∏–±—É—Ö: –ø–æ—Ç—É–∂–Ω–∞ –∞—Ç–∞–∫–∞ (–ø–æ—Ç—Ä–µ–±—É—î 2+ –±–ª–æ–∫–∏)");
        
        if (blockedAttacksCount > 0) {
            additionalInfo.append(String.format("\n  ‚ö° –ù–∞–∫–æ–ø–∏—á–µ–Ω–æ –µ–Ω–µ—Ä–≥—ñ—ó: %d –±–ª–æ–∫—ñ–≤ (+" + 
                                (blockedAttacksCount * 10) + "%% —É—Ä–æ–Ω—É)", blockedAttacksCount));
        }
        
        if (!adaptiveShieldActive && health < maxHealth * ADAPTIVE_SHIELD_THRESHOLD) {
            additionalInfo.append("\n  üõ°Ô∏è –ì–û–¢–û–í–ò–ô –î–û –ê–ö–¢–ò–í–ê–¶–Ü–á –©–ò–¢–ê!");
        }
        
        if (canUseElementalBurst()) {
            additionalInfo.append("\n  üí• –ì–û–¢–û–í–ò–ô –î–û –ï–õ–ï–ú–ï–ù–¢–ê–õ–¨–ù–û–ì–û –í–ò–ë–£–•–£!");
        }
        
        return additionalInfo.toString();
    }
}