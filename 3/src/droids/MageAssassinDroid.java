package droids;

import effects.PoisonEffect;
import effects.FireEffect;
import effects.SpeedBuffEffect;

/**
 * –ö–ª–∞—Å –º–∞–≥-–∞—Å–∞—Å–∏–Ω –¥—Ä–æ—ó–¥–∞ –∑ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–º–∏ –º–∞–≥—ñ—á–Ω–∏–º–∏ —Ç–∞ –∞—Å–∞—Å–∏–Ω—Å—å–∫–∏–º–∏ –∑–¥—ñ–±–Ω–æ—Å—Ç—è–º–∏:
 * - –ú–æ–∂–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ —è–∫ –æ—Ç—Ä—É—Ç—É, —Ç–∞–∫ —ñ –≤–æ–≥–æ–Ω—å
 * - –í–∏—Å–æ–∫–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ç–∞ —É—Ö–∏–ª—è–Ω–Ω—è
 * - –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –∫–æ–º–±–æ-–∞—Ç–∞–∫–∞ –∑ –ø—ñ–¥—Å–∏–ª–µ–Ω–Ω—è–º —à–≤–∏–¥–∫–æ—Å—Ç—ñ
 */
public class MageAssassinDroid extends Droid {
    private static final double POISON_CHANCE = 0.20; // 20% —à–∞–Ω—Å –æ—Ç—Ä—É—ó—Ç–∏
    private static final double FIRE_CHANCE = 0.15; // 15% —à–∞–Ω—Å –ø—ñ–¥–ø–∞–ª–∏—Ç–∏
    private static final double DODGE_CHANCE = 0.25; // 25% —É—Ö–∏–ª—è–Ω–Ω—è
    private static final double COMBO_THRESHOLD = 0.3; // –ü—Ä–∏ 30% HP
    private static final int SPEED_BUFF_TURNS = 3;
    private static final int SPEED_BONUS = 8;
    
    private boolean comboActivated = false;
    
    public MageAssassinDroid(String name) {
        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: —Å–µ—Ä–µ–¥–Ω—ñ–π —É—Ä–æ–Ω, –Ω–∏–∑—å–∫–µ HP, –≤–∏—Å–æ–∫–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å, –¥—É–∂–µ –≤–∏—Å–æ–∫–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å
        super(name, 85, 32, 0.90, 18);
    }
    
    @Override
    protected int applySpecialAttackAbility(int damage, Droid target) {
        // –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –∫–æ–º–±–æ –ø—Ä–∏ –Ω–∏–∑—å–∫–æ–º—É HP
        if (!comboActivated && health < maxHealth * COMBO_THRESHOLD) {
            activateComboMode();
        }
        
        // –®–∞–Ω—Å–∏ –Ω–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç—ñ–≤
        boolean appliedEffect = false;
        
        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Ç—Ä—É—Ç—É (–≤–∏—â–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ—Å—Ç—å)
        if (random.nextDouble() < POISON_CHANCE) {
            PoisonEffect poison = new PoisonEffect(4, 8);
            target.applyEffect(poison);
            System.out.println(name + " –æ—Ç—Ä—É—é—î " + target.getName() + " –¢–û–ö–°–ò–ß–ù–û–Æ –ú–ê–ì–Ü–Ñ–Æ!");
            appliedEffect = true;
        }
        // –Ø–∫—â–æ –æ—Ç—Ä—É—Ç–∞ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–æ–≥–æ–Ω—å
        else if (random.nextDouble() < FIRE_CHANCE) {
            FireEffect fire = new FireEffect(3, 10);
            target.applyEffect(fire);
            System.out.println(name + " –ø—ñ–¥–ø–∞–ª—é—î " + target.getName() + " –ú–ê–ì–Ü–ß–ù–ò–ú –í–û–ì–ù–ï–ú!");
            appliedEffect = true;
        }
        
        // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —É—Ä–æ–Ω, —è–∫—â–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–π –±—É–¥—å-—è–∫–∏–π –µ—Ñ–µ–∫—Ç
        if (appliedEffect) {
            damage = (int) (damage * 1.15); // +15% —É—Ä–æ–Ω—É –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ –µ—Ñ–µ–∫—Ç—É
            System.out.println("–ú–∞–≥—ñ—á–Ω–∞ –∞—Ç–∞–∫–∞ –ø–æ—Å–∏–ª–µ–Ω–∞! (+15% —É—Ä–æ–Ω—É)");
        }
        
        return damage;
    }
    
    @Override
    protected int applySpecialDefenseAbility(int incomingDamage) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É—Ö–∏–ª—è–Ω–Ω—è
        if (random.nextDouble() < DODGE_CHANCE) {
            System.out.println(name + " –ú–ê–ì–Ü–ß–ù–û –£–•–ò–õ–Ø–Ñ–¢–¨–°–Ø –≤—ñ–¥ –∞—Ç–∞–∫–∏!");
            return 0; // –ü–æ–≤–Ω–µ —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —É—Ä–æ–Ω—É
        }
        
        return incomingDamage;
    }
    
    /**
     * –ê–∫—Ç–∏–≤—É—î –∫–æ–º–±–æ-—Ä–µ–∂–∏–º - –ø—ñ–¥–≤–∏—â—É—î —à–≤–∏–¥–∫—ñ—Å—Ç—å —ñ –≤—ñ–¥–Ω–æ–≤–ª—é—î –¥–µ—è–∫—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ
     */
    private void activateComboMode() {
        SpeedBuffEffect speedBuff = new SpeedBuffEffect(SPEED_BUFF_TURNS, SPEED_BONUS);
        this.applyEffect(speedBuff);
        comboActivated = true;
        System.out.println(name + " –∞–∫—Ç–∏–≤—É—î –ú–ê–ì–Ü–ß–ù–ï –ö–û–ú–ë–û! –®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–±—ñ–ª—å—à–µ–Ω–∞ –Ω–∞ " + SPEED_BONUS + "!");
    }
    
    /**
     * –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –∞—Ç–∞–∫–∞ - –ø–æ–¥–≤—ñ–π–Ω–∏–π —É–¥–∞—Ä –∑ —Ç–æ–∫—Å–∏—á–Ω–∏–º –≤–æ–≥–Ω–µ–º
     */
    public void toxicFireStrike(Droid target) {
        if (!canUseToxicFireStrike()) {
            System.out.println(name + " –Ω–µ –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–∏–π —É–¥–∞—Ä!");
            return;
        }
        
        System.out.println(name + " –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –¢–û–ö–°–ò–ß–ù–ò–ô –í–û–ì–ù–Ø–ù–ò–ô –£–î–ê–†!");
        
        // –ü–µ—Ä—à–∏–π —É–¥–∞—Ä - –∑–≤–∏—á–∞–π–Ω–∏–π –∑ –æ—Ç—Ä—É—Ç–æ—é
        double accuracyRoll1 = random.nextDouble();
        double effectiveAccuracy1 = Math.max(accuracy, accuracyRoll1);
        int damage1 = (int) (getModifiedDamage() * 0.8 * effectiveAccuracy1);
        
        PoisonEffect poison = new PoisonEffect(5, 12);
        target.applyEffect(poison);
        
        int actualDamage1 = target.takeDamage(damage1);
        System.out.println("–ü–µ—Ä—à–∏–π —É–¥–∞—Ä: " + actualDamage1 + " —É—Ä–æ–Ω—É + —Å–∏–ª—å–Ω–∞ –æ—Ç—Ä—É—Ç–∞!");
        
        // –î—Ä—É–≥–∏–π —É–¥–∞—Ä - –∑ –≤–æ–≥–Ω–µ–º (—è–∫—â–æ —Ü—ñ–ª—å —â–µ –∂–∏–≤–∞)
        if (target.isAlive()) {
            double accuracyRoll2 = random.nextDouble();
            double effectiveAccuracy2 = Math.max(accuracy, accuracyRoll2);
            int damage2 = (int) (getModifiedDamage() * 0.9 * effectiveAccuracy2);
            
            FireEffect fire = new FireEffect(4, 15, 0.3); // –í–∏—Å–æ–∫–∏–π —à–∞–Ω—Å –ø–æ—à–∏—Ä–µ–Ω–Ω—è
            target.applyEffect(fire);
            
            int actualDamage2 = target.takeDamage(damage2);
            System.out.println("–î—Ä—É–≥–∏–π —É–¥–∞—Ä: " + actualDamage2 + " —É—Ä–æ–Ω—É + —Å–∏–ª—å–Ω–∏–π –≤–æ–≥–æ–Ω—å!");
        }
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É –∞—Ç–∞–∫—É
     */
    public boolean canUseToxicFireStrike() {
        return isAlive() && health > 15;
    }
    
    /**
     * –°–∫–∏–¥–∞—î —Å—Ç–∞–Ω –∫–æ–º–±–æ –¥–ª—è –Ω–æ–≤–∏—Ö –±–æ—ó–≤
     */
    public void resetCombo() {
        comboActivated = false;
    }
    
    @Override
    public String getInfo() {
        String baseInfo = super.getInfo();
        StringBuilder additionalInfo = new StringBuilder(baseInfo);
        
        additionalInfo.append("\n  –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ:");
        additionalInfo.append(String.format("\n  - –¢–æ–∫—Å–∏—á–Ω–∞ –º–∞–≥—ñ—è: %.0f%% —à–∞–Ω—Å –æ—Ç—Ä—É—ó—Ç–∏", POISON_CHANCE * 100));
        additionalInfo.append(String.format("\n  - –ú–∞–≥—ñ—á–Ω–∏–π –≤–æ–≥–æ–Ω—å: %.0f%% —à–∞–Ω—Å –ø—ñ–¥–ø–∞–ª–∏—Ç–∏", FIRE_CHANCE * 100));
        additionalInfo.append(String.format("\n  - –ú–∞–≥—ñ—á–Ω–µ —É—Ö–∏–ª—è–Ω–Ω—è: %.0f%% —à–∞–Ω—Å —É–Ω–∏–∫–Ω—É—Ç–∏ —É—Ä–æ–Ω—É", DODGE_CHANCE * 100));
        additionalInfo.append(String.format("\n  - –ú–∞–≥—ñ—á–Ω–µ –∫–æ–º–±–æ: +%d —à–≤–∏–¥–∫–æ—Å—Ç—ñ –ø—Ä–∏ HP < %.0f%%", 
                            SPEED_BONUS, COMBO_THRESHOLD * 100));
        additionalInfo.append("\n  - –ü–æ–¥–≤—ñ–π–Ω–∏–π —É–¥–∞—Ä: —Ç–æ–∫—Å–∏—á–Ω–∏–π –≤–æ–≥–Ω—è–Ω–∏–π —É–¥–∞—Ä");
        
        if (!comboActivated && health < maxHealth * COMBO_THRESHOLD) {
            additionalInfo.append("\n  ‚ö° –ì–û–¢–û–í–ò–ô –î–û –ú–ê–ì–Ü–ß–ù–û–ì–û –ö–û–ú–ë–û!");
        }
        
        if (comboActivated) {
            additionalInfo.append("\n  üîÆ –ö–û–ú–ë–û –ê–ö–¢–ò–í–ù–ï!");
        }
        
        return additionalInfo.toString();
    }
}